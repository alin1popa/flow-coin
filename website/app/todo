        Select color palette
[DONE]  Post contract to testnet
[DONE]  Figure out how to install/use a js eth lib
[DONE]  Figure out how to get data from contract
        Figure out how to push data to contract (call functions)
[DONE]  Figure out how to get event history
[DONE]  Figure out how to listen to events
[DONE]  Create ethereum network helper
[DONE]  Create get readonly contract
[DONE]  Create get readwrite contract
[DONE]  Connect through auto injected web3
[DONE]  Test auto injected web3 with metamask for readonly / readwrite
[DONE]  Refactor promises/async data getters in the vue way
[DONE]  Create lib to interface with contract
[DONE]  Lib - GetBalance
[DONE]  Model - Order
[DONE]  Model - PriceHistory
[DONE]  Model - OrderRequest
[DONE]  Model - OrderType
[DONE]  Model - OrderRequestType
[DONE]  Lib - GetMyOrders
[DONE]  Lib - PlaceOrder
[DONE]  Lib - GetOrderbook
[DONE]  Lib - GetPriceHistory
[DONE]  Connect - GetBalance
        Connect - GetMyOrders
        Connect - PlaceOrder
        Connect - GetOrderbook
        Connect - GetPriceHistory
        Implement design / color palette
        Add navbar
        Navbar - menu
        Navbar - show balance
        Navbar - show GetFC/GenerateFC buttons
[DONE]  Display - my balance
[DONE]  Display - 1x my orders
[DONE]  Display - my active orders
        Display - Place order
        Display - Place market order
[DONE]  Display - 1x order from orderbook
[DONE]  Display - all orders from orderbook
        Display - price history
        Other pages
[DONE]  Create TODO list
        Orderbook - lib - group buy orders and sell orders
        Orderbook - lib - sort orders by rate
        Orderbook - display - half screen buy, half screen sell
        Orderbook - display - set scroll on both sides
        Orderbook - display - pre-set scroll position to last on the buy side
[DONE]  Contract - interface for token generation with limit
[DONE]  Contract - implement interface for token
[DONE]  Contract - check syntax in remix
[DONE]  Contract - check works in remix
        Contract check - can put a buy order
        Contract check - can retract a buy order
        Contract check - can put a sell order
        Contract check - can retract a sell order
        Contract check - can fill a buy order
        Contract check - can fill a sell order
        Contract check - can fill 2 buy orders
        Contract check - can fill 2 sell orders
[DONE]  Contract - publish on ropsten (no code)
[DONE]  State manager - singleton
[DONE]  State manager - state component
[DONE]  State manager - init in my orders
[DONE]  State manager - plan listeners for ethereum events
        Check contract if require() deletes all your gas
        Fix require if it deletes all your gas
        Metamask fix warning network reload
[DONE]  EthHelper get latest block B
[DONE]  EthHelper get event history up to B (event logs)
[DONE]  EthHelper get event type by its topic
        Figure out if Settle event needed for price (diff between retracting order and settling)
[DONE]  Create EventListener class
[DONE]  EventListener get latest block B
[DONE]  EventListener get event history
[DONE]  EventListener register listeners for all events
[DONE]  EventListener set listener callbacks
        Create Map<Address, Ratio => Amount, index in state array>
        EventListener map history to Map<...> (and update stuff)
        EventListener convert Map<...> to state.Orders[]
        EventListener update Map<...> to contain Order[] index
        Convert units for orders (don't want to display 10^21381798320 wei)
[DONE]  Move GetProvider to separate function
[DONE]  Remove provider from readwrite contract
[DONE]  Create singleton Loader instance
[DONE]  Loader - Call in dashboard
[DONE]  Loader - generate state
[DONE]  Loader - setup contract in state
[DONE]  Loader - setup event listener
[DONE]  Loader - wait for all loaded
        Loader - what happens when it can't get injected provider => must error
        EventListener - process buy event
        EventListener - process sell event
